package com.rosettix.api.strategy;

import java.util.List;
import java.util.Map;

/**
 * Generic query strategy interface that can handle different database types
 * and query languages (SQL, MongoDB, etc.)
 */
public interface QueryStrategy {
    /**
     * Get a representation of the database schema/structure that the LLM can understand
     * @return Schema representation as a string
     */
    String getSchemaRepresentation();

    /**
     * Get the query language/dialect used by this database
     * @return Query language name (e.g., "PostgreSQL", "MongoDB", "Neo4j")
     */
    String getQueryLanguage();

    /**
     * Execute the generated query against the database
     * @param query The query string generated by the LLM
     * @return Results as a list of key-value maps
     */
    List<Map<String, Object>> executeQuery(String query);

    /**
     * Get the strategy identifier/name
     * @return Strategy name for lookup purposes
     */
    String getStrategyName();

    /**
     * Validate if a query is safe to execute
     * @param query The query to validate
     * @return true if query is safe, false otherwise
     */
    default boolean isQuerySafe(String query) {
        // Default implementation - can be overridden by specific strategies
        return query != null && !query.trim().isEmpty();
    }

    /**
     * Build a database-specific prompt for the LLM
     * @param question The user's natural language question
     * @param schema The schema representation for this database
     * @return A formatted prompt string for the LLM
     */
    default String buildPrompt(String question, String schema) {
        return String.format(
            "Given the %s schema: \n%s\n---\nTranslate the question into a single, valid %s query. " +
                "Do not add any explanation, comments, or markdown formatting.\nQuestion: \"%s\"",
            getQueryLanguage(),
            schema,
            getQueryLanguage(),
            question
        );
    }

    /**
     * Clean the raw query response from the LLM for this specific database
     * @param rawQuery The raw text response from the LLM
     * @return A clean, executable query
     */
    default String cleanQuery(String rawQuery) {
        if (rawQuery == null) {
            return "";
        }

        // Remove common markdown code block delimiters
        String cleaned = rawQuery
            .replace("```sql", "")
            .replace("```mongodb", "")
            .replace("```javascript", "")
            .replace("```", "");

        // Trim whitespace
        return cleaned.trim();
    }
}
